;; Generated by mirage.%%VERSION%%

(executable
  (name config)
  (flags (:standard -warn-error -A))
  (modules config)
  (libraries mirage))

(rule
  (targets key_gen.ml main.ml manifest.json manifest.ml)
  (deps config.ml mirage.context)
  (action
    (run ./config.exe build --context-file mirage.context --dry-run)))

(executable
  (enabled_if (= %{context_name} "mirage-hvt"))
  (name main)
  (modes (native object))
  (libraries ocaml-freestanding lwt mirage-bootvar-solo5 mirage-clock-freestanding mirage-logs mirage-runtime mirage-solo5 mirage-types)
  (link_flags -g -w +A-4-41-42-44 -bin-annot -strict-sequence -principal -safe-string)
  (modules (:standard \ config manifest))
  (foreign_stubs  (language c) (names manifest))
  (forbidden_libraries unix))

(rule
  (targets manifest.c)
  (deps manifest.json (package solo5))
  (action (run solo5-elftool gen-manifest manifest.json manifest.c)))

(rule (copy %{lib:solo5-hvt:ldflags} solo5-ldflags))

(rule (copy %{lib:ocaml-freestanding:ldflags} freestanding-ldflags))

(rule
  (target noop.hvt)
  (enabled_if (= %{context_name} "mirage-hvt"))
  (mode (promote (until-clean)))
  (deps main.exe.o manifest.o solo5-ldflags freestanding-ldflags)
  (action
    (run
      ld %{read:freestanding-ldflags} %{read:solo5-ldflags}
         main.exe.o -o %{target})))

(rule
  (target cflags-hvt)
  (action
    (with-stdout-to %{target} (progn
      (echo "(")
      (cat %{lib:solo5-hvt:cflags})
      (echo " ")
      (cat %{lib:ocaml-freestanding:cflags})
      (echo ")")))))

;(install
;  (files noop.hvt)
;  need ocaml/dune#3354
;  (enabled_if (= %{context_name} "mirage-hvt"))
;  (section bin)
;  (package noop))
